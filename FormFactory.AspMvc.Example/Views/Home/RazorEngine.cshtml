@using FormFactory
@using FormFactory.RazorEngine
@using FormFactory.Example.Controllers
@using FormFactory.Example.Models
@using FormFactory.Example.Models.Examples
@{
    ViewBag.Title = "FormFactory Examples";
}
<header class="jumbotron masthead">
    <div class="inner">
        <h1>FormFactory</h1>
        <p>
            The ASP.NET MVC html form builder
        </p>
        <p class="download-info">
            <a href="https://github.com/mcintyre321/FormFactory" class="btn btn-primary btn-large">View project on GitHub</a>
        </p>
    </div>
</header>
<div class="marketing">
    <div class="row">
        <div class="col-md-4">
            <h2>
                Reflection form generation</h2>
            <p>
                Because you shouldn't have to update your html when you update your object model</p>
        </div>
        <div class="col-md-4">
            <h2>
                Convention based rendering</h2>
            <p>
                Specify custom templates for rendering different object types.
            </p>
        </div>
        <div class="col-md-4">
            <h2>
                Twitter bootstrap support</h2>
            <p>
                Styled for bootstrap (by default)</p>
        </div>
    </div>
    <!--/row-->
</div> 
<h1 class="page-header">
    Rendering objects
</h1>
<div class="row">
    <div class="col-md-6">
        <pre class="prettyprint">
var me = new NestedFormsExample() { ... set properties ... };

FF.PropertiesFor(me).Render(Html);
</pre>
        <pre class="prettyprint">
public class NestedFormsExample
{
    DateTime _dateOfBirth;

    public NestedFormsExample(DateTime dateOfBirth, string[] hobbies)
    {
        _dateOfBirth = dateOfBirth;
        Hobbies = hobbies;
        Position = Models.Position.SeniorSubcontractor;
        Enabled = true;
    }

    //readonly property
    public int Age { get { return (int) Math.Floor((DateTime.Now - _dateOfBirth).Days/365.25); } }

    //writable property
    public string Name { get; set; }

    //nullable enumerable property
    public Position? Position { get; set; }

    public bool Enabled { get; set; }

    //readonly property
    public IEnumerable &lt;string> Hobbies { get; private set; }

    public string Gender { get; set; }
    //choices for geneder rendered as a select list
    public IEnumerable&lt;string> Gender_choices() 
    {
        return "male,female,not specified".Split(',');
    }

    public string Location { get; set; }
    //location enhanced with auto complete
    public IEnumerable&lt;string> Location_suggestions() 
    {
        return "USA,UK,Canada".Split(',');
    } 
    
    //rendered as a list with add, remove, re-order options
    public ICollection&lt;Movie> TopMovies { get; set; } 

}

</pre>
    </div>
    <div class="span1">
        &nbsp;</div>
    <div class="col-md-5">
        <form>
        @{
            var me = new NestedFormsExample(DateTime.Parse("22 Dec 1981"), "Fishing,Fighting".Split(',')) { Name = "Harry" };
            @Html.Raw(FormFactory.RazorEngine.Properties.For(me).Render(Html));
        }
        <input type="submit" value="submit" />
        </form>
    </div>
</div>
