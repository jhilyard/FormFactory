@model UploadedFilesResultModel
@using FormFactory
@using FormFactory.Example.Controllers
@using FormFactory.Example.Models
<h1 class="page-header">
    Uploading files
</h1>
<div class="row">
    <div class="span6">
        <p>
            To enable uploading files, you first need to register the UploadedFileModelBinder,
            and supply a method that will store the file and return its URL.
        </p>
        <pre class="prettyprint">
using FormFactory.Mvc;

public class MvcApplication : System.Web.HttpApplication
{
    protected void Application_Start()
    {
        //...

        ModelBinders.Binders.RegisterUploadedFileModelBinder((file, controllerContext, modelBindingContext) => MyFileStore.StoreFile(file));
    }
    //...
}
        </pre>
        <p>
            Then you can use the UploadedFile value type to wrap the file upload.
        </p>
        <pre class="prettyprint">
using FormFactory.ValueTypes;

public class UploadedFilesTestModel
{
    [Required]
    public UploadedFile Image1 { get; set; }
    public UploadedFile Image2 { get; set; }
}
</pre>
        <pre class="prettyprint">
using (var form = Html.FormForAction((UploadedFilesController ctlr, UploadedFilesTestModel model) => ctlr.UploadTest(model)))
{
    form.Render();
}
</pre>
        <pre class="prettyprint">
[HttpPost]
public ActionResult UploadTest( UploadedFilesTestModel model)
{
    if (!ModelState.IsValid)
    {
        return View();
    }
    var results = new UploadedFilesResultModel
                {
                    Image1Uri = model.Image1 != null ?
                                    model.Image1.Url : null,
                    Image2Uri = model.Image2 != null ?
                                    model.Image2.Url : null
                };
    return View(results);
}
        </pre>
    </div>
    <div class="span1">
        &nbsp;</div>
    <div class="col-md-5">
        @using (var form = Html.FormForAction((UploadedFilesController ctlr, UploadedFilesTestModel model) => ctlr.UploadTest(model)))
        {
            form.Render();
        }
        @if (Model != null)
        {
            <h3>
                Posted results</h3>
            <p>
                Image 1:</p>
            if (Model.Image1Url != null)
            {
            <img src="@Model.Image1Url" />
            }
            else
            {
            <p>
                (null)</p>
            }
            <p>
                Image 2:</p>
            if (Model.Image2Url != null)
            {
            <img src="@Model.Image2Url" />
            }
            else
            {
            <p>
                (null)</p>
            }
        }
    </div>
</div>
